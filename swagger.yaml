openapi: "3.0.2"
info:
  title: API Title
  version: "1.0"
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: User
    description: Operations with user
  - name: Custom
    description: Operations with custom
  - name: Menu
    description: Operations with menu
  - name: Product
    description: Operations with product

paths:
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: Add new client or manager account
      requestBody:
        description: New client or manager info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: New user was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/IntegrityError'
  /user/{id}:
    put:
      tags:
        - User
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Update an existing user
      description: Update personal information by id
      parameters:
        - name: id
          in: path
          description: id of user to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated personal info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/IntegrityError'
    delete:
      tags:
        - User
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Delete an existing user
      description: Delete an existing user by id
      parameters:
        - name: id
          in: path
          description: id of user to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The user was successfully deleted
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    get:
      tags:
        - User
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get user info
      description: Get all info about an existing user by id
      parameters:
        - name: id
          in: path
          description: id of user to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /user/{id}/makeManager:
    put:
      tags:
        - User
      security:
        - cookieAuth_manager: []
      summary: Give a user manager rights
      description: Update user role as 'manager' for user by id
      parameters:
        - name: id
          in: path
          description: id of user to be given manager rights
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User role was successfully updated
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '408':
          $ref: '#/components/responses/AlreadyManagerError'
  /user/getAll:
    get:
      tags:
        - User
      security:
        - cookieAuth_manager: []
      summary: Get all users
      description: get the list of all users and their personal info
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
  /user/login:
    post:
      tags:
        - User
      security:
        - basicAuth: []
      summary: Log user into the system
      description: Create a new session for an existing user
      requestBody:
       description: Authorization information
       content:
         application/json:
           schema:
             type: object
             properties:
               email:
                 type: string
                 example: m.anderson@gmil.com
               password:
                 type: string
                 example: 12345
      responses:
        '201':
          description: Session successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
  /user/logout:
    delete:
      tags:
        - User
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Log user out of the system
      description: End session for an existing user
      responses:
        '200':
          description: Session successfully ended
  /custom:
    post:
      tags:
        - Custom
      security:
        - cookieAuth_client: []
      summary: Create new custom
      description: Create custom (dish name, quantity, address)
      requestBody:
        description: New custom info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Custom'
        required: true
      responses:
        '201':
          description: New custom was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Custom'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '409':
          $ref: '#/components/responses/IntegrityError'
  /custom/{id}:
    put:
      tags:
        - Custom
      security:
        - cookieAuth_manager: []
      summary: Update some info of custom
      description: Update address or price of current custom
      parameters:
        - name: id
          in: path
          description: id of custom to be given new status
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Info to update
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: InProgress
      responses:
        '200':
          description: Custom status  was successfully updated
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/IntegrityError'
    delete:
      tags:
        - Custom
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Delete an existing custom
      description: Delete custom by id
      parameters:
        - name: id
          in: path
          description: id of custom to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The custom was successfully deleted
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    get:
      tags:
        - Custom
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Get custom info
      description: Get all info about an existing custom by id
      parameters:
        - name: id
          in: path
          description: id of custom to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Order was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Custom'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /custom/{id}/updateStatus:
    put:
      tags:
        - Custom
      security:
        - cookieAuth_manager: []
      summary: Update status to custom
      description: Follow the progress of custom preparing  by updating status
      parameters:
        - name: id
          in: path
          description: id of custom to be given new status
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: New custom status
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: InProgress
      responses:
        '200':
          description: Custom status  was successfully updated
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/IntegrityError'
  /custom/getAll:
    get:
      tags:
        - Custom
      security:
        - cookieAuth_manager: []
      summary: Get all customs
      description: get the list of all customs and their details
      responses:
        '200':
          description: List of all customs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Custom'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
  /menu:
    post:
      tags:
        - Menu
      security:
        - cookieAuth_manager: []
      summary: Create new menu item
      description: Create new drink/confection with all details about it
      requestBody:
        description: New menu item info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        '201':
          description: New menu item was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '409':
          $ref: '#/components/responses/IntegrityError'
  /menu/{id}:
    put:
      tags:
        - Menu
      security:
        - cookieAuth_manager: []
      summary: Update an existing menu item
      description: Update any details about existing drink/confection
      parameters:
        - name: id
          in: path
          description: id of menu item to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated menu item info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
      responses:
        '200':
          description: The menu item  was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/IntegrityError'
    delete:
      tags:
        - Menu
      security:
        - cookieAuth_manager: []
      summary: Delete an existing menu item
      description: Delete an existing menu item by id
      parameters:
        - name: id
          in: path
          description: id of menu item to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The menu item was successfully deleted
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    get:
      tags:
        - Menu
      summary: Get menu item
      description: Get all info about an existing menu item by id
      parameters:
        - name: id
          in: path
          description: id of menu item to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Menu item was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /menu/{id}/AddToDemand:
    put:
      tags:
        - Menu
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Add an existing menu item to demand list
      description: In case the drink/confection is not available, add it to demand list
      parameters:
        - name: id
          in: path
          description: id of menu item to be added to demand list
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The menu item  was successfully added to demand list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /menu/getAll:
    get:
      tags:
        - Menu
      summary: Get all menu items
      description: get the list of all drinks/confections
      responses:
        '200':
          description: List of all menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
  /menu/filter:
    put:
      tags:
        - Menu
      security:
        - cookieAuth_client: []
        - cookieAuth_manager: []
      summary: Filter menu items by name and ingredients
      description: find some drinks/confections by their name and ingredients
      responses:
        '200':
          description: List of all menu items
          content:
            application/json:
              schema:
                example:
                  name: Late
                  products:
                    - 1
                    - 2
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
  /product:
    post:
      tags:
        - Product
      security:
        - cookieAuth_manager: []
      summary: Create new product
      description: Create new product to add to cafe warehouse
      requestBody:
        description: New product info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '201':
          description: New product was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '409':
          $ref: '#/components/responses/IntegrityError'
  /product/{id}:
    put:
      tags:
        - Product
      security:
        - cookieAuth_manager: []
      summary: Update an existing product
      description: Update product information by product id
      parameters:
        - name: id
          in: path
          description: id of product to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated product info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: The product data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/IntegrityError'
    delete:
      tags:
        - Product
      security:
        - cookieAuth_manager: []
      summary: Delete an existing product
      description: Delete an existing product by id
      parameters:
        - name: id
          in: path
          description: id of product to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The product was successfully deleted
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    get:
      tags:
        - Product
      security:
        - cookieAuth_manager: []
      summary: Get product info
      description: Get all info about an existing product by id
      parameters:
        - name: id
          in: path
          description: id of product to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Product was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /product/getAll:
    get:
      tags:
        - Product
      security:
        - cookieAuth_manager: []
      summary: Get all products
      description: Get the list of all products and their details
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'


components:
  responses:
    AccessDeniedError:
      description: Access denied
    ValidationError:
      description: Invalid input data
    IntegrityError:
      description: Violation of integrity
    NotFoundError:
      description: Resource not found
    WrongCredentialsError:
      description: Wrong email or password
    AlreadyManagerError:
      description: User is already manager

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Mary
        surname:
          type: string
          example: Anderson
        phone:
          type: string
          example: "0973452312"
          description: The phone number of user, must go without country-identifying prefix, like +38
        email:
          type: string
          example: m.anderson@gmil.com
          description: The email address of user, must be in the format of an email address, like example@mail.com
        password:
          type: string
          writeOnly: true
          example: anderson.cafeacc.2233

    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        street:
          type: string
          example: Kopernika
        house:
          type: string
          example: 23a
        flat:
          type: integer
          format: int64
          example: 12
    Details:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        quantity:
          type: integer
          format: int64 # 32?
          example: 5
        menu_id:
          type: integer
          format: int64
          example: 1
    Custom:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        price:
          type: number
          format: float
          example: 245.5
        date:
          type: string
          format: date-time
          example: 2021-01-30T08:30:00Z
        user_id:
          type: integer
          format: int64
          example: 1
        address_id:
          type: integer
          format: int64
          example: 1
    Menu:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Muffin
        price:
          type: number
          format: float
          description: Price for one drink/confection
          example: 12.8
        availability:
          type: boolean
          description: Indicates whether the drink/confection is available for buying or not
          example: true
        demand:
          type: boolean
          description: In case drink/confection is not available, indicates whether it is in the demand list or not
          example: true

    Ingredient:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        weight:
          type: number
          format: float
          description: Weight for one type of ingredient for the menu item
        percent:
          type: number
          format: float
          description: The percentage of extra charge
        menu_id:
          type: integer
          format: int64
          example: 1
        product_id:
          type: integer
          format: int64
          example: 1

    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: flour
        price:
          type: number
          format: float
          description: Price for one kg of product
        weight:
          type: number
          format: float
          description: Total weight of product

    CustomStatus:
      type: object
      properties:
        status:
          type: string
          example: "prepared"

    MenuFilter:
      type: object
      properties:
        name:
          type: string
          example: "Latte"
        products:
          type: array
          items:
            type: integer
          example: [1, 2]

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth_client:
      description: Client authentication
      type: apiKey
      in: cookie
      name: JSESSIONID
    cookieAuth_manager:
      description: Manager authentication
      type: apiKey
      in: cookie
      name: JSESSIONID
#  securitySchemes:
#    manager_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: https://cafe_dol/oauth/authorize
#          scopes:
#            write: add, update and delete users, orders, menu items and products
#            read: read info about users, orders, menu items and products